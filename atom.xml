<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Licorice]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-04T15:13:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Licorice]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[互联网梦想的终结]]></title>
    <link href="http://yoursite.com/2015/12/01/%E4%BA%92%E8%81%94%E7%BD%91%E6%A2%A6%E6%83%B3%E7%9A%84%E7%BB%88%E7%BB%93/"/>
    <id>http://yoursite.com/2015/12/01/互联网梦想的终结/</id>
    <published>2015-12-01T11:42:16.000Z</published>
    <updated>2015-12-04T15:13:00.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接：<a href="https://medium.com/backchannel/the-end-of-the-internet-dream-ba060b17da61#.scw1fj7h2" target="_blank" rel="external">https://medium.com/backchannel/the-end-of-the-internet-dream-ba060b17da61#.scw1fj7h2</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接：<a href="https://medium.com/backchannel/the-end-of-the-internet-dream-ba060b17da61#.scw1fj7h2" target="_blank" rel="external">https:]]>
    </summary>
    
      <category term="Internet" scheme="http://yoursite.com/tags/Internet/"/>
    
      <category term="翻译文章" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[COM读写复合文档]]></title>
    <link href="http://yoursite.com/2015/11/16/windows%E4%B8%8B%E5%86%99%E5%A4%8D%E5%90%88%E6%96%87%E6%A1%A3Commit%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/11/16/windows下写复合文档Commit的一些问题/</id>
    <published>2015-11-16T09:27:16.000Z</published>
    <updated>2015-12-04T15:13:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="复合文档的结构">复合文档的结构</h3><p>Windows下的复合文档是一种把文件内容按照类似文件系统的结构存储的文件，也叫做结构化文档。最常见的复合文档格式莫过于Microsoft Office存储的<em> .xls, </em> .doc, * .ppt三种格式了。<br>复合文档的结构大概是这样的：<br>-RootStorage<br>—–   subStream1<br>—–   subStream2<br>—–   subStream3<br>由一个根Storage下挂着一些子Stream组成，看起来还是很清楚明了的哈。<br>然而东西依然是以二进制格式去存储，但是不是顺序存储的，文件一开头并不是RootStorage。<br>复合文档有自己的存储结构，简要说一下：</p>
<ol>
<li><p>复合文档头。<br> 存储在文件的0~512个字节内，文档头存储了复合文档的一些基本信息，如复合文档标识，文件版本号，字节顺序规则标识，复合文档中扇区的各种信息，而扇区则和各个Storage以及Stream息息相关。</p>
</li>
<li><p>目录入口。<br> 这里才记录着真正的RootStorage存储的起始位置， 以及各个Stream的位置，数据结构的话对应的就是一颗红黑树，查找下一个子目录时就是依靠这棵树的。</p>
</li>
</ol>
<p>复合文档结构说起来还是蛮复杂的，推荐一篇文章吧，讲的比较细：<br><a href="http://club.excelhome.net/thread-227502-1-1.html" target="_blank" rel="external">复合文档文件格式研究（二进制）</a></p>
<h3 id="对复合文档的操作">对复合文档的操作</h3><p>复合文档终归还是文件啊，操作也就无非就是Open(),Seek(),Write(),Read(),Commit()等。还是就着代码来说吧~上代码~</p>
<p><strong>只读文件:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filename  文件名</span></span><br><span class="line"><span class="comment">//pRootStorage 总目录</span></span><br><span class="line">::StgOpenStorage(</span><br><span class="line">	filename, </span><br><span class="line">	<span class="literal">NULL</span>, </span><br><span class="line">	STGM_READ | STGM_SHARE_EXCLUSIVE, </span><br><span class="line">	<span class="number">0</span>，</span><br><span class="line">	<span class="number">0</span>，</span><br><span class="line">	&amp;pRootStorage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//streamName 子stream的名称</span></span><br><span class="line"><span class="comment">//pSubStream 子stream</span></span><br><span class="line">pRootStorage-&gt;OpenStream(</span><br><span class="line">	streamName, </span><br><span class="line">	<span class="literal">NULL</span>, </span><br><span class="line">	STGM_READ | STGM_SHARE_EXCLUSIVE,</span><br><span class="line">	<span class="number">0</span>,</span><br><span class="line">	&amp;pSubStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//pBuff 读取后存放数据的缓存</span></span><br><span class="line"><span class="comment">//cbRead 想要读取的字节数</span></span><br><span class="line"><span class="comment">//cbReaded 实际读取的字节数</span></span><br><span class="line">pSubStream-&gt;Read(pBuff, cbRead, &amp;cbReaded);</span><br></pre></td></tr></table></figure></p>
<p><strong>只写文件:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意第三个参数和上面的不同</span></span><br><span class="line">::StgOpenStorage(</span><br><span class="line">	filename, </span><br><span class="line">	<span class="literal">NULL</span>, </span><br><span class="line">	STGM_WRITE | STGM_SHARE_EXCLUSIVE, </span><br><span class="line">	<span class="number">0</span>，</span><br><span class="line">	<span class="number">0</span>，</span><br><span class="line">	&amp;pRootStorage);</span><br><span class="line"></span><br><span class="line">pRootStorage-&gt;OpenStream(</span><br><span class="line">	streamName, </span><br><span class="line">	<span class="literal">NULL</span>, </span><br><span class="line">	STGM_WRITE | STGM_SHARE_EXCLUSIVE,</span><br><span class="line">	<span class="number">0</span>,</span><br><span class="line">	&amp;pSubStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//pBuff 写入文件的数据缓冲区</span></span><br><span class="line"><span class="comment">//cbWrite 打算写的数据大小</span></span><br><span class="line"><span class="comment">//cbWritten 实际写进流的数据大小</span></span><br><span class="line">pSubStream-&gt;Write(p Buff, cbWrite, &amp;cbWritten);</span><br></pre></td></tr></table></figure></p>
<p><strong>边读边写文件:</strong><br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意第三个参数</span></span><br><span class="line"><span class="tag">::StgOpenStorage</span>(</span><br><span class="line">	filename, </span><br><span class="line">	<span class="built_in">NULL</span>, </span><br><span class="line">	STGM_READWRITE | STGM_SHARE_EXCLUSIVE| STGM_TRANSACTED, </span><br><span class="line">	<span class="number">0</span>，</span><br><span class="line">	<span class="number">0</span>，</span><br><span class="line">	<span class="subst">&amp;</span>pRootStorage);</span><br><span class="line"></span><br><span class="line">pRootStorage<span class="subst">-&gt;</span>OpenStream(</span><br><span class="line">	streamName, </span><br><span class="line">	<span class="built_in">NULL</span>, </span><br><span class="line">	STGM_READWRITE | STGM_SHARE_EXCLUSIVE,</span><br><span class="line">	<span class="number">0</span>,</span><br><span class="line">	<span class="subst">&amp;</span>pSubStream);</span><br><span class="line"></span><br><span class="line">pSubStream<span class="subst">-&gt;</span>Read(pBuffRead, cbRead, <span class="subst">&amp;</span>cbReaded);</span><br><span class="line"></span><br><span class="line"><span class="comment">//pos 要写的位置</span></span><br><span class="line"><span class="comment">//STREAM_SEEK_SET 第一个参数pos的相对位置，是从pSubStream指向的流的开始位置，还是当前位置开始，还是文件末尾位置，STREAM_SEEK_SET是流开始位置</span></span><br><span class="line">pSubStream<span class="subst">-&gt;</span>Seek(pos, STREAM_SEEK_SET, <span class="built_in">NULL</span>);</span><br><span class="line"></span><br><span class="line">pSubStream<span class="subst">-&gt;</span>Write(pBuffWrite, cbWrite, <span class="subst">&amp;</span>cbWiritten);</span><br><span class="line"></span><br><span class="line"><span class="comment">//grfCommitFlags 将Write中修改的数据提交到文件中</span></span><br><span class="line"><span class="comment">//注意这里和只写文件时不一样，只写文件的时候，是没有调Commit的</span></span><br><span class="line">pSubStream<span class="subst">-&gt;</span>Commit(grfCommitFlags);</span><br><span class="line">pRootStorage<span class="subst">-&gt;</span>Commit(grfCommitFlags);</span><br></pre></td></tr></table></figure></p>
<p><strong>1. ::StgOpenStorage() </strong><br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HRESULT StgOpenStorage(</span><br><span class="line">  _In_  const WCHAR    <span class="keyword">*</span>pwcsName,</span><br><span class="line">  _In_        IStorage <span class="keyword">*</span>pstgPriority,</span><br><span class="line">  _In_        DWORD    grfMode,</span><br><span class="line">  _In_        SNB      snbExclude,</span><br><span class="line">  _In_        DWORD    reserved,</span><br><span class="line">  _Out_       IStorage <span class="keyword">*</span><span class="keyword">*</span>ppstgOpen</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>这个函数用来打开文件系统中的存在的根目录，第一个参数一般就是你要打开的复合文档的文件名，如果第一个参数指定了是复合文档的文件名，第二个参数为NULL。第三个参数用来指定打开根目录的方式，如STGM_READ，STGM_WRITE等。第四个参数 如果不为NULL，则是一个块独占的存储区域的指针，没啥特殊需要就给NULL值了。第五个参数保留必须为0。第六个参数是打开后拿到的根目录的指针。</p>
<p>grfMode的值有以下这些：<br>STGM_READ 只读模式<br>STGM_WRITE 只写模式<br>STGM_READWRITE 读写模式<br>STGM_SHARE_DENY_NONE 共享存取模式<br>STGM_SHARE_DENY_READ 禁止共享的读模式<br>STGM_SHARE_DENY_WRITE 禁止共享的写模式<br>STGM_SHARE_EXCLUSIVE 独占的存取模式<br>STGM_DIRECT 对复合文档的所有修改立即生效<br>STGM_TRANSACTED 提交时所有修改才被保存到复合文档中<br>STGM_FAILIFTHERE 若已存在一个流或存储，则创建复合文档失败<br>STGM_CREATE 若已存在一个流或存储，则它将被覆盖，否则将创建一个新的流或存储<br>STGM_DELETEONRELEASE 当这个复合文档中的流或存储被释放时，它也会自动被释放</p>
<p>这些值可以组合使用。</p>
<p><strong>2. IStorage::OpenStream()</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HRESULT <span class="title">OpenStream</span>(<span class="params"></span><br><span class="line">  [<span class="keyword">in</span>]  <span class="keyword">const</span> WCHAR   *pwcsName,</span><br><span class="line">  [<span class="keyword">in</span>]        <span class="keyword">void</span>    *reserved1,</span><br><span class="line">  [<span class="keyword">in</span>]        DWORD   grfMode,</span><br><span class="line">  [<span class="keyword">in</span>]        DWORD   reserved2,</span><br><span class="line">  [<span class="keyword">out</span>]       IStream **ppstm</span><br><span class="line"></span>)</span>;</span><br></pre></td></tr></table></figure></p>
<p>用指定的模式打开指定根目录下的子流。第一个目录是子流的名称。第二个和第四个参数保留置空。第三个目录是打开流的模式，参考上面列出的值。第五个参数是存储打开的子流的指针。</p>
<p>Read()，Write()，Seek()，这三个函数代码的注释中基本都解释了，这里不再赘述。</p>
<p><strong>3. Commit()方法与写模式和边读边写模式的差别</strong></p>
<p>我们注意到以STGM_WRITE | STGM_SHARE_EXCLUSIVE模式和STGM_READWRITE | STGM_SHARE_EXCLUSIVE模式打开根目录和子流，并进行写操作的时候，处理方式是不一样的。<br>STGM_WRITE 模式，一般可以理解为直接模式打开这个复合文档，此时，对复合文档的写操作，会将修改的数据马上自动刷新到复合文档中去。<br>而STGM_READWRITE 模式，一般理解为交易模式，此时，必须手动调用Commit方法才能将修改的数据刷新到复合文档中去。</p>
<p>看一下Commit的参数：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">HRESULT</span> <span class="constant">Commit</span>(</span><br><span class="line"><span class="constant">DWORD</span> grfCommitFlags </span><br><span class="line">/<span class="regexp">/指定修改的数据提交的方式，下面是这个参数的取值意义</span><br><span class="line">/</span>*typedef <span class="class"><span class="keyword">enum</span> <span class="title">tagSTGC</span> </span></span><br><span class="line">&#123; </span><br><span class="line"><span class="constant">STGC_DEFAULT</span> = <span class="number">0</span>, </span><br><span class="line"><span class="constant">STGC_OVERWRITE</span> = <span class="number">1</span>, </span><br><span class="line"><span class="constant">STGC_ONLYIFCURRENT</span> = <span class="number">2</span>, </span><br><span class="line"><span class="constant">STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE</span> = <span class="number">4</span> </span><br><span class="line">&#125; <span class="constant">STGC</span>;*<span class="regexp">/</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure></p>
<p>主要说一下STGC_DEFAULT和STGC_OVERWRITE两个值。首先要了解Commit到底做了些什么。当调用Commit方法时，会先在文档中申请一块新的空间，把新的数据写入这块空间。并将这块空间的入口地址记录到复合文档的索引中去，这样完成新的数据替代旧的数据。当指定以STGC_DEFAULT模式提交时，旧的数据还会存在于文件当中，等到下次修改数据并提交时才会被覆盖掉。而当指定STGC_OVERWRITE模式时，旧的数据将不会保留。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="复合文档的结构">复合文档的结构</h3><p>Windows下的复合文档是一种把文件内容按照类似文件系统的结构存储的文件，也叫做结构化文档。最常见的复合文档格式莫过于Microsoft Office存储的<em> .xls, </em> .doc, * .ppt]]>
    </summary>
    
      <category term="Windows, COM" scheme="http://yoursite.com/tags/Windows-COM/"/>
    
      <category term="Windows" scheme="http://yoursite.com/categories/Windows/"/>
    
  </entry>
  
</feed>
